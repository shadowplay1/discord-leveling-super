{
    "meta": {
        "generator": "0.10.0",
        "format": 20,
        "date": 1630414625218
    },
    "custom": {
        "general": {
            "name": "General",
            "files": {
                "welcome": {
                    "name": "Welcome",
                    "type": "md",
                    "content": "# Discord Leveling Super\r\n\r\n[![Downloads](https://img.shields.io/npm/dt/discord-leveling-super?style=for-the-badge)](https://www.npmjs.com/package/discord-leveling-super)\r\n[![Stable Version](https://img.shields.io/npm/v/discord-leveling-super?style=for-the-badge)](https://www.npmjs.com/package/discord-leveling-super)\r\n\r\n<b>Discord Leveling Super</b> - Easy and customizable leveling framework for your [Discord Bot](https://discord.js.org/#/).\r\n\r\n## 🙋‍♂️ | Welcome!\r\nWelcome to the `discord-leveling-super v1.0.3` documentation.\r\n\r\n## 📂 | Installation\r\n<b>Note:</br><b>\r\n<b>Node.js 16.6.0+ and Discord.js 13.1.0+ is required.</b><br>\r\n```console\r\nnpm i discord-leveling-super\r\nyarn add discord-leveling-super\r\npnpm add discord-leveling-super\r\n```\r\n\r\n## ❓ | About\r\n<b>Discord Leveling Super is a powerful Node.js module that allows you to make an leveling system in your bot very easily.</b>\r\n<br>\r\n<ul>\r\n<li><b>TypeScript Support 📘</b></li>\r\n<li><b>Object-oriented 📜</b></li>\r\n<li><b>Flexible and Customizable ⚙️</b></li>\r\n<li><b>Easy to use 👍</b></li>\r\n<li><b>Beginner Friendly 😄</b></li>\r\n<li><b>Multi-Server Setup 🏦</b></li>\r\n</ul>\r\n\r\n## 🤔 | Help\r\n<b>If you don't understand something in the documentation or you are experiencing problems, feel free to join our <a href = \"https://discord.gg/4pWKq8vUnb\">Support Server</a>.</b>\r\n\r\n## ❗ | Useful Links\r\n<ul>\r\n<li><b><a href = \"https://www.npmjs.com/package/discord-leveling-super\">NPM</a></b></li>\r\n<li><b><a href = \"https://github.com/shadowplay1/discord-leveling-super\">GitHub</a></b></li>\r\n<li><b><a href = \"https://github.com/shadowplay1/discord-leveling-super/tree/main/examples\">Examples</a></b></li>\r\n<li><b><a href = \"https://discord.gg/4pWKq8vUnb\">Discord Server</a></b></li>\r\n</ul>\r\n<b>If you found a bug, have any questions or need help, join the <a href = \"https://discord.gg/4pWKq8vUnb\">Support Server</a>.</b>\r\n<br>\r\n<b>Module Created by ShadowPlay.</b>\r\n\r\n# ❤️ Thanks for using Discord Leveling Super ❤️",
                    "path": "info/general/welcome.md"
                },
                "examples": {
                    "name": "Examples",
                    "type": "md",
                    "content": "# Discord Leveling Super\n\n[![Downloads](https://img.shields.io/npm/dt/discord-leveling-super?style=for-the-badge)](https://www.npmjs.com/package/discord-leveling-super)\n[![Stable Version](https://img.shields.io/npm/v/discord-leveling-super?style=for-the-badge)](https://www.npmjs.com/package/discord-leveling-super)\n\n<b>Discord Leveling Super</b> - Easy and customizable leveling framework for your [Discord Bot](https://discord.js.org/#/).\n\n## Simple Example\n```js\nconst { Client } = require('discord.js')\nconst client = new Client();\n\nconst Leveling = require('discord-leveling-super');\nconst leveling = new Leveling(bot);\n\nclient.on('ready', () => {\n  console.log(`${client.user.tag} is ready!`);\n});\n\nleveling.on('ready', () => {\n  console.log(`Leveling is ready!`);\n});\n\nclient.login('token')\n```\n\n## Options Example\n```js\nconst Leveling = require('discord-leveling-super');\nnew Leveling({\n    storagePath: './leveling.json', // Full path to a JSON file. Default: './leveling.json'.\n    checkStorage: true, // Checks the if database file exists and if it has errors. Default: true.\n    xp: 5, // Amount of XP that user will receive after sending a message. Default: 5.\n    maxXP: 300, // Amount of XP that user will need to reach the next level. This value will double for each level. Default: 300.\n    status: true, // You can enable or disable the leveling system using this option. Default: true.\n    lockedChannels: [], // Array of channel IDs that won't give XP to users. Default: [].\n    ignoredUsers: [], // Array of user IDs that won't give XP. Default: [].\n    ignoreBots: true, // If true, every message from bots won't give them XP. Default: true.\n\n    /**\n     * Filter function that accepts a message; \n     * it must return a boolean value and it will add XP \n     * only to authors of filtered messages.; \n     * Use 'null' to disable the filter. \n     * \n     * Default: '() => true'.\n     */\n    filter: msg => !msg.content.startsWith(prefix),\n\n    updater: {\n        checkUpdates: true, // Sends the update state message in console on start. Default: true.\n        upToDateMessage: true // Sends the message in console on start if module is up to date. Default: true.\n    },\n    errorHandler: {\n        handleErrors: true, // Handles all errors on start. Default: true.\n        attempts: 5, // Amount of attempts to load the module. Use 'null' for infinity attempts. Default: 5.\n        time: 3000 // Time between every attempt to start the module. Default: 3000.\n    },\n    optionsChecker: {\n        ignoreInvalidTypes: false, // Allows the method to ignore the options with invalid types. Default: false.\n        ignoreUnspecifiedOptions: false, // Allows the method to ignore the unspecified options. Default: false.\n        ignoreInvalidOptions: false, // Allows the method to ignore the unexisting options. Default: false.\n        showProblems: false, // Allows the method to show all the problems in the console. Default: false.\n        sendLog: false, // Allows the method to send the result in the console. Default: false.\n        sendSuccessLog: false // Allows the method to send the result if no problems were found. Default: false.\n    }\n});\n```\n\n## Events Example\n```js\n// level up event\nleveling.on('levelUp', data => {\n    console.log(`${data.user.tag} just reached the level ${data.level} on server with ID ${data.guildID}.`)\n    data.sendMessage(`Congrats, ${data.user}, you just reached the level **${data.level}**!`)\n})\n\n// xp events\nleveling.on('setXP', data => {\n    console.log(`Someone's just set ${data.xp} XP to user with ID ${data.userID} on server with ID ${data.guildID}.`)\n})\n\nleveling.on('addXP', data => {\n    console.log(`User with ID ${data.userID} just received ${data.xp} XP on server with ID ${data.guildID}.`)\n})\n\nleveling.on('subtractXP', data => {\n    console.log(`Someone's just subtracted ${data.xp} XP to user with ID ${data.userID} on server with ID ${data.guildID}.`)\n})\n\n\n// level events\nleveling.on('setLevel', data => {\n    console.log(`Someone's just set level ${data.level} to user with ID ${data.userID} on server with ID ${data.guildID}.`)\n})\n\nleveling.on('addLevel', data => {\n    if (!data.onMessage) console.log(`Someone's just added ${data.level} levels to user with ID ${data.userID} on server with ID ${data.guildID}.`)\n})\n\nleveling.on('subtractLevel', data => {\n    console.log(`Someone's just subtracted ${data.level} levels to user with ID ${data.userID} on server with ID ${data.guildID}.`)\n})\n\n\n// total xp events\nleveling.on('setTotalXP', data => {\n    console.log(`Someone's just set ${data.totalXP} of total XP to user with ID ${data.userID} on server with ID ${data.guildID}.`)\n})\n\nleveling.on('addTotalXP', data => {\n    console.log(`Someone's just added ${data.totalXP} of total XP to user with ID ${data.userID} on server with ID ${data.guildID}.`)\n})\n\nleveling.on('subtractTotalXP', data => {\n    console.log(`Someone's just added ${data.totalXP} of total XP to user with ID ${data.userID} on server with ID ${data.guildID}.`)\n})\n\n// core events\nleveling.on('ready', () => {\n    console.log('Leveling is ready!')\n})\nleveling.on('destroy', () => {\n    console.log('Leveling was destroyed.')\n})\n```\n## Rank Command\n```js\nif (message.content.startsWith('+rank')) {\n    const args = message.content.split(' ').slice(1)\n\n    const member = message.mentions.members.first()?.user || \n    message.guild.members.cache.get(args[0])?.user || \n    message.guild.members.cache.find(x => x.user.username.toLowerCase() == args.join(' ').toLocaleLowerCase())?.user || \n    message.guild.members.cache.find(x => x.displayName.toLowerCase() == args.join(' ').toLocaleLowerCase())?.user || \n    message.author\n\n    const isOnTheServer = member ? '\\n' : '\\nNot on the server.\\n'\n\n    const {\n        level, xp, maxXP,\n        totalXP, difference, userData\n    } = leveling.ranks.get(member.id, message.guild.id)\n\n    if (!userData && !member) return message.channel.send('Cannot find the specified user!')\n        return message.channel.send(`**${userData.tag}**${isOnTheServer}**------------------------**\\nLevel: **${level || 1}**\\nXP: **${xp || 0}/${maxXP || 300}**\\nTotal XP: **${totalXP || 0}**\\nXP until the next level: **${difference || 300}**`)\n}\n```\n\n## Leaderboard Command\n```js\nif (message.content.startsWith('+leaderboard') || message.content.startsWith('+lb')) {\n    const ranks = leveling.ranks.leaderboard(message.guild.id)\n    const leaderboard = ranks.map((x, i) => `**${i + 1}** - **${x.userData.tag}** ${x.user ? '' : '(X)'} - Level **${x.level}**, **${x.xp}** XP`).join('\\n')\n\n    return message.channel.send(leaderboard)\n}\n```\n\n## ❗ | Useful Links\n<ul>\n<li><b><a href = \"https://www.npmjs.com/package/discord-leveling-super\">NPM</a></b></li>\n<li><b><a href = \"https://github.com/shadowplay1/discord-leveling-super\">GitHub</a></b></li>\n<li><b><a href = \"https://github.com/shadowplay1/discord-leveling-super/tree/main/examples\">Bot Examples</a></b></li>\n<li><b><a href = \"https://discord.gg/4pWKq8vUnb\">Discord Server</a></b></li>\n</ul>\n<b>If you found a bug, have any questions or need help, join the <a href = \"https://discord.gg/4pWKq8vUnb\">Support Server</a>.</b>\n<br>\n<b>Module Created by ShadowPlay.</b>\n\n# ❤️ Thanks for using Discord Leveling Super ❤️",
                    "path": "info/general/examples.md"
                },
                "faq": {
                    "name": "FAQ",
                    "type": "md",
                    "content": "# Discord Leveling Super\r\n\r\n[![Downloads](https://img.shields.io/npm/dt/discord-leveling-super?style=for-the-badge)](https://www.npmjs.com/package/discord-leveling-super)\r\n[![Stable Version](https://img.shields.io/npm/v/discord-leveling-super?style=for-the-badge)](https://www.npmjs.com/package/discord-leveling-super)\r\n\r\n<b>Discord Leveling Super</b> - Easy and customizable leveling framework for your [Discord Bot](https://discord.js.org/#/).\r\n\r\n## ❓ | Frequently Asked Questions\r\n\r\n### Q: Will the module support MongoDB?\r\n#### A: No. At the moment, we cant do support for MongoDB in the module. Sorry about that.\r\n<br>\r\n\r\n### Q: Why do I get the \"Cannot read property '(any manager property from main class)' of null\"?\r\n#### A: Because the module is not started and not ready yet. if you have a command handler, you have to do `<client>.leveling = leveling`, which will add my module in your bot client's property and you could use the module in any command without any errors. For example: `<client>.leveling.ranks.get(...)` will return you a user's rank object.\r\n<br>\r\n\r\n### Q: Why do I get the \"SyntaxError: Unexpected token '.' \" or any Discord.js related error?\r\n#### A: Because the module is supporting only Node.js v16.6.0 or above and Discord.js 13.1.0 or above. You need to update them to make the module work.\r\n<br>\r\n\r\n### Q: Why are examples not working?\r\n#### A: Examples provided in documentation and in GitHub are for one-file bot. See the question above to get more info. If it's a bug, see the question below.\r\n<br>\r\n\r\n### Q: I found a bug or have an idea. Where I could submit it?\r\n#### A: On our [Support Server](https://discord.gg/4pWKq8vUnb). We appreciate that!\r\n<br>\r\n\r\n## ❗ | Useful Links\r\n<ul>\r\n<li><b><a href = \"https://www.npmjs.com/package/discord-leveling-super\">NPM</a></b></li>\r\n<li><b><a href = \"https://github.com/shadowplay1/discord-leveling-super\">GitHub</a></b></li>\r\n<li><b><a href = \"https://github.com/shadowplay1/discord-leveling-super/tree/main/examples\">Bot Examples</a></b></li>\r\n<li><b><a href = \"https://discord.gg/4pWKq8vUnb\">Discord Server</a></b></li>\r\n</ul>\r\n<b>If you found a bug, have any questions or need help, join the <a href = \"https://discord.gg/4pWKq8vUnb\">Support Server</a>.</b>\r\n<br>\r\n<b>Module Created by ShadowPlay.</b>\r\n\r\n# ❤️ Thanks for using Discord Leveling Super ❤️",
                    "path": "info/general/faq.md"
                },
                "updating": {
                    "name": "Updating your code",
                    "type": "md",
                    "content": "# Discord Leveling Super\r\n\r\n[![Downloads](https://img.shields.io/npm/dt/discord-leveling-super?style=for-the-badge)](https://www.npmjs.com/package/discord-leveling-super)\r\n[![Stable Version](https://img.shields.io/npm/v/discord-leveling-super?style=for-the-badge)](https://www.npmjs.com/package/discord-leveling-super)\r\n\r\n<b>Discord Leveling Super</b> - Easy and customizable leveling framework for your [Discord Bot](https://discord.js.org/#/).\r\n\r\n## ✍ | Updating your code\r\n\r\n## Version 1.0.3\r\nVersion 1.0.3 was rewritten in TypeScript and takes a much more object-oriented approach than previous versions. It also contains many bug fixes, optimizations, methods and support for Discord.js v13 and new Database and Settings Managers.\r\n\r\nHere's some examples of methods that were changed in this version:\r\n- `Leveling.rank()` ==> `RanksManager.rank()`\r\n- `Leveling.leaderboard()` ==> `RanksManager.leaderboard()`\r\n- `Leveling.setXP()` ==> `XPManager.set()`\r\n- `Leveling.setTotalXP()` ==> `TotalXPManager.set()`\r\n- `Leveling.all()` ==> `UtilsManager.all()`\r\n<br>\r\n\r\nSo you have to change your code like this:\r\n- `leveling.rank()` ==> `leveling.ranks.get()`\r\n- `leveling.rank()` ==> `leveling.ranks.leaderboard()`\r\n- `leveling.setXP()` ==> `leveling.xp.set()`\r\n- `leveling.setTotalXP()` ==> `leveling.totalXP.set()`\r\n- `leveling.all()` ==> `leveling.utils.all()`\r\n\r\nSee the [changelog](https://dls-docs.tk/#/docs/main/stable/general/changelog) for the full list of changes.\r\n\r\n## ❗ | Useful Links\r\n<ul>\r\n<li><b><a href = \"https://www.npmjs.com/package/discord-leveling-super\">NPM</a></b></li>\r\n<li><b><a href = \"https://github.com/shadowplay1/discord-leveling-super\">GitHub</a></b></li>\r\n<li><b><a href = \"https://github.com/shadowplay1/discord-leveling-super/tree/main/examples\">Examples</a></b></li>\r\n<li><b><a href = \"https://discord.gg/4pWKq8vUnb\">Discord Server</a></b></li>\r\n</ul>\r\n<b>If you found a bug, have any questions or need help, join the <a href = \"https://discord.gg/4pWKq8vUnb\">Support Server</a>.</b>\r\n<br>\r\n<b>Module Created by ShadowPlay.</b>\r\n\r\n# ❤️ Thanks for using Discord Leveling Super ❤️",
                    "path": "info/general/updating.md"
                },
                "changelog": {
                    "name": "Changelog",
                    "type": "md",
                    "content": "# Discord Leveling Super\r\n\r\n[![Downloads](https://img.shields.io/npm/dt/discord-leveling-super?style=for-the-badge)](https://www.npmjs.com/package/discord-leveling-super)\r\n[![Stable Version](https://img.shields.io/npm/v/discord-leveling-super?style=for-the-badge)](https://www.npmjs.com/package/discord-leveling-super)\r\n\r\n<b>Discord Leveling Super</b> - Easy and customizable leveling framework for your [Discord Bot](https://discord.js.org/#/).\r\n\r\n## ⏰ | Changelog\r\n\r\n<b>1.0.0</b>\r\n<ul>\r\n    <li><b>The first version of the module: added leveling methods, events, LevelingError class and type defenitions.</b></li>\r\n</ul>\r\n<b>1.0.1</b>\r\n<ul>\r\n    <li><b>Code optimization.</b></li>\r\n    <li><b>Fixed typos.</b></li>\r\n</ul>\r\n<b>1.0.2</b>\r\n<ul>\r\n    <li><b>Code optimization.</b></li>\r\n    <li><b>Fixed typos.</b></li>\r\n    <li><b>Fixed bugs.</b></li>\r\n    <li><b>Added an events example, updated and fixed other examples.</b></li>\r\n    <li><b>Now every event is returning a guild ID and user ID with other properties and 'levelUp' event is also returns a guild ID.</b></li>\r\n</ul>\r\n<b>1.0.3</b>\r\n<ul>\r\n    <li><b>Full rewrite on TypeScript.</b></li>\r\n    <li><b>Code optimization.</b></li>\r\n    <li><b>Fixed typos.</b></li>\r\n    <li><b>Fixed bugs.</b></li>\r\n    <li><b>Added managers.</b></li>\r\n    <li><b>Added a new Database Manager.</b></li>\r\n    <li><b>Now you can setup the module on different guilds using the brand new Settings Manager.</b></li>\r\n    <li><b>Now this module has a <a href=\"https://dls-docs.tk\">documentation website</a>!</b></li>\r\n    <li><b>... and many more!</b></li>\r\n    <b>Here's the changes you need to make in your code:</b>\r\n</ul>\r\n\r\n```diff\r\n- leveling.checkUpdates()\r\n- leveling.all()\r\n- leveling.clearStorage()\r\n- leveling.removeGuild(guildID)\r\n- leveling.removeUser(memberID. guildID)\r\n\r\n+ leveling.utils.checkUpdates()\r\n+ leveling.utils.all()\r\n+ leveling.utils.clearStorage()\r\n+ leveling.utils.removeGuild(guildID)\r\n+ leveling.utils.removeUser(memberID. guildID)\r\n\r\n\r\n- leveling.setXP(xp, memberID, guildID)\r\n- leveling.addXP(xp, memberID, guildID)\r\n\r\n+ leveling.xp.set(xp, memberID, guildID)\r\n+ leveling.xp.add(xp, memberID, guildID)\r\n+ leveling.xp.subtract(xp, memberID, guildID)\r\n\r\n\r\n- leveling.setTotalXP(xp, memberID, guildID)\r\n- leveling.addTotalXP(xp, memberID, guildID)\r\n\r\n+ leveling.totalXP.set(xp, memberID, guildID)\r\n+ leveling.totalXP.add(xp, memberID, guildID)\r\n+ leveling.totalXP.subtract(xp, memberID, guildID)\r\n\r\n\r\n- leveling.setLevel(xp, memberID, guildID)\r\n- leveling.addLevel(xp, memberID, guildID)\r\n\r\n+ leveling.totalXP.set(xp, memberID, guildID)\r\n+ leveling.totalXP.add(xp, memberID, guildID)\r\n+ leveling.totalXP.subtract(xp, memberID, guildID)\r\n\r\n\r\n- leveling.rank(memberID, guildID)\r\n- leveling.leaderboard(memberID, guildID)\r\n    \r\n+ leveling.ranks.get(memberID, guildID)\r\n+ leveling.ranks.leaderboard(memberID, guildID)\r\n\r\n- leveling.errors\r\n\r\n+ leveling.LevelingError\r\n\r\n+ leveling.fetcher\r\n+ leveling.database\r\n+ leveling.settings\r\n```\r\n\r\n<br>\r\n<b>If you found a bug, have any questions or need help, join the <a href = \"https://discord.gg/4pWKq8vUnb\">Support Server</a>.</b>\r\n<br>\r\n<b>Module Created by ShadowPlay.</b>\r\n\r\n# ❤️ Thanks for using Discord Leveling Super ❤️",
                    "path": "info/general/changelog.md"
                }
            }
        }
    },
    "classes": [
        {
            "name": "Leveling",
            "description": "The Leveling class.",
            "construct": {
                "name": "Leveling",
                "description": "The Leveling class.",
                "params": [
                    {
                        "name": "client",
                        "description": "Discord Bot Client.",
                        "type": [
                            [
                                [
                                    "Client"
                                ]
                            ]
                        ]
                    },
                    {
                        "name": "options",
                        "description": "Leveling options object.",
                        "type": [
                            [
                                [
                                    "LevelingOptions"
                                ]
                            ]
                        ]
                    }
                ]
            },
            "props": [
                {
                    "name": "options",
                    "description": "Leveling options object.",
                    "type": [
                        [
                            [
                                "LevelingOptions"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 53,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "client",
                    "description": "Discord Bot Client",
                    "type": [
                        [
                            [
                                "Client"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 58,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "ready",
                    "description": "Module ready status.",
                    "type": [
                        [
                            [
                                "Boolean"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 63,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "errored",
                    "description": "Module errored status.",
                    "type": [
                        [
                            [
                                "Boolean"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 68,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "interval",
                    "description": "Database checking interval.",
                    "type": [
                        [
                            [
                                "NodeJSTimeout"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 73,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "LevelingError",
                    "description": "Leveling error class.",
                    "type": [
                        [
                            [
                                "LevelingError"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 78,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "utils",
                    "description": "Utils manager methods object.",
                    "type": [
                        [
                            [
                                "UtilsManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 83,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "version",
                    "description": "Module version.",
                    "type": [
                        [
                            [
                                "String"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 88,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "docs",
                    "description": "Link to the module's documentation website.",
                    "type": [
                        [
                            [
                                "String"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 93,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "database",
                    "description": "Database manager methods object.",
                    "type": [
                        [
                            [
                                "DatabaseManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 98,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "fetcher",
                    "description": "XP manager methods object.",
                    "type": [
                        [
                            [
                                "FetchManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 103,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "settings",
                    "description": "Settings manager methods class.",
                    "type": [
                        [
                            [
                                "SettingsManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 108,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "xp",
                    "description": "XP manager methods object.",
                    "type": [
                        [
                            [
                                "XPManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 113,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "levels",
                    "description": "Level manager methods object.",
                    "type": [
                        [
                            [
                                "LevelManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 118,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "totalXP",
                    "description": "Total XP manager methods object.",
                    "type": [
                        [
                            [
                                "LevelManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 123,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "ranks",
                    "description": "Ranks manager methods object.",
                    "type": [
                        [
                            [
                                "RanksManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 128,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                }
            ],
            "methods": [
                {
                    "name": "kill",
                    "description": "Kills the Leveling instance.",
                    "returns": {
                        "types": [
                            [
                                [
                                    "Leveling"
                                ]
                            ],
                            [
                                [
                                    "boolean"
                                ]
                            ]
                        ],
                        "description": "Leveling instance."
                    },
                    "meta": {
                        "line": 158,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "init",
                    "description": "Starts the module.",
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<"
                                ],
                                [
                                    "Boolean",
                                    ">"
                                ]
                            ]
                        ],
                        "description": "If started successfully: true; else: Error instance."
                    },
                    "meta": {
                        "line": 180,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "_init",
                    "description": "Initializates the module.",
                    "access": "private",
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<"
                                ],
                                [
                                    "boolean",
                                    ">"
                                ]
                            ]
                        ],
                        "description": "If started successfully: true; else: Error instance."
                    },
                    "meta": {
                        "line": 232,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "start",
                    "description": "Starts all the managers.",
                    "access": "private",
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If successfully started: true."
                    },
                    "meta": {
                        "line": 346,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                }
            ],
            "events": [
                {
                    "name": "ready",
                    "description": "Emits when the module is ready.",
                    "params": [
                        {
                            "name": "data",
                            "description": "Void event.",
                            "type": [
                                [
                                    [
                                        "void"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 731,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "destroy",
                    "description": "Emits when the module is destroyed.",
                    "params": [
                        {
                            "name": "data",
                            "description": "Void event.",
                            "type": [
                                [
                                    [
                                        "void"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 737,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "levelUp",
                    "description": "Emits when someone's got the next level.",
                    "params": [
                        {
                            "name": "data",
                            "description": "Level up data object.",
                            "type": [
                                [
                                    [
                                        "LevelUpData"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 744,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "setLevel",
                    "description": "Emits when someone's set the level.",
                    "params": [
                        {
                            "name": "data",
                            "description": "Level data object.",
                            "type": [
                                [
                                    [
                                        "LevelData"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 751,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "addLevel",
                    "description": "Emits when someone's added the levels.",
                    "params": [
                        {
                            "name": "data",
                            "description": "Level data object.",
                            "type": [
                                [
                                    [
                                        "XPData"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 757,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "subtractLevel",
                    "description": "Emits when someone's subtracted the levels.",
                    "params": [
                        {
                            "name": "data",
                            "description": "Level data object.",
                            "type": [
                                [
                                    [
                                        "LevelData"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 763,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "setXP",
                    "description": "Emits when someone's set the XP.",
                    "params": [
                        {
                            "name": "data",
                            "description": "Level data object.",
                            "type": [
                                [
                                    [
                                        "LevelData"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 770,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "addXP",
                    "description": "Emits when someone's add the XP.",
                    "params": [
                        {
                            "name": "data",
                            "description": "Level data object.",
                            "type": [
                                [
                                    [
                                        "XPData"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 776,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "subtractXP",
                    "description": "Emits when someone's subtracted the XP.",
                    "params": [
                        {
                            "name": "data",
                            "description": "Level data object.",
                            "type": [
                                [
                                    [
                                        "LevelData"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 782,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "setTotalXP",
                    "description": "Emits when someone's set the total XP.",
                    "params": [
                        {
                            "name": "data",
                            "description": "Level data object.",
                            "type": [
                                [
                                    [
                                        "LevelData"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 789,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "addTotalXP",
                    "description": "Emits when someone's added the total XP.",
                    "params": [
                        {
                            "name": "data",
                            "description": "Level data object.",
                            "type": [
                                [
                                    [
                                        "XPData"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 795,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                },
                {
                    "name": "subtractTotalXP",
                    "description": "Emits when someone's subtracted the total XP.",
                    "params": [
                        {
                            "name": "data",
                            "description": "Level data object.",
                            "type": [
                                [
                                    [
                                        "LevelData"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 801,
                        "file": "index.js",
                        "path": "dist/src"
                    }
                }
            ],
            "meta": {
                "line": 48,
                "file": "index.js",
                "path": "dist/src"
            }
        },
        {
            "name": "DotParser",
            "description": "Dot parser class.",
            "access": "private",
            "construct": {
                "name": "DotParser",
                "description": "Leveling constructor options object. There's only needed options object properties for this manager to work properly.",
                "params": [
                    {
                        "name": "options",
                        "description": "Constructor options object.",
                        "type": [
                            [
                                [
                                    "Object"
                                ]
                            ]
                        ]
                    },
                    {
                        "name": "options.storagePath",
                        "description": "Full path to a JSON file. Default: './leveling.json'.",
                        "type": [
                            [
                                [
                                    "String"
                                ]
                            ]
                        ]
                    }
                ]
            },
            "props": [
                {
                    "name": "options",
                    "description": "Leveling constructor options object.",
                    "access": "private",
                    "type": [
                        [
                            [
                                "LevelingOptions"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 36,
                        "file": "DotParser.js",
                        "path": "dist/src/classes"
                    }
                },
                {
                    "name": "fetcher",
                    "description": "Fetch manager methods object.",
                    "access": "private",
                    "type": [
                        [
                            [
                                "FetchManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 42,
                        "file": "DotParser.js",
                        "path": "dist/src/classes"
                    }
                }
            ],
            "methods": [
                {
                    "name": "parse",
                    "description": "Parses the key and fetches the value from database.",
                    "params": [
                        {
                            "name": "key",
                            "description": "The key in database.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "any"
                                ]
                            ],
                            [
                                [
                                    "false"
                                ]
                            ]
                        ],
                        "description": "The data from database or 'false' if failed to parse or 'null' if nothing found."
                    },
                    "meta": {
                        "line": 51,
                        "file": "DotParser.js",
                        "path": "dist/src/classes"
                    }
                },
                {
                    "name": "set",
                    "description": "Parses the key and sets the data in database.",
                    "params": [
                        {
                            "name": "key",
                            "description": "The key in database.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "value",
                            "description": "Any data to set.",
                            "type": [
                                [
                                    [
                                        "any"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If set successfully: true; else: false"
                    },
                    "meta": {
                        "line": 73,
                        "file": "DotParser.js",
                        "path": "dist/src/classes"
                    }
                },
                {
                    "name": "remove",
                    "description": "Parses the key and removes the data from database.",
                    "params": [
                        {
                            "name": "key",
                            "description": "The key in database.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If removed successfully: true; else: false"
                    },
                    "meta": {
                        "line": 103,
                        "file": "DotParser.js",
                        "path": "dist/src/classes"
                    }
                },
                {
                    "name": "isObject",
                    "description": "Checks for is the item object and returns it.",
                    "params": [
                        {
                            "name": "item",
                            "description": "The item to check.",
                            "type": [
                                [
                                    [
                                        "any"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "Is the item object or not."
                    },
                    "meta": {
                        "line": 132,
                        "file": "DotParser.js",
                        "path": "dist/src/classes"
                    }
                }
            ],
            "meta": {
                "line": 21,
                "file": "DotParser.js",
                "path": "dist/src/classes"
            }
        },
        {
            "name": "Emitter",
            "description": "Simple Leveling event emitter with only important emitter methods.",
            "access": "private",
            "construct": {
                "name": "Emitter",
                "description": "Simple Leveling event emitter with only important emitter methods."
            },
            "methods": [
                {
                    "name": "on",
                    "description": "Listens to the event.",
                    "params": [
                        {
                            "name": "event",
                            "description": "Event name.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "listener",
                            "description": "Listener function.",
                            "type": [
                                [
                                    [
                                        "function"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 28,
                        "file": "Emitter.js",
                        "path": "dist/src/classes"
                    }
                },
                {
                    "name": "once",
                    "description": "Listens to the event only for once.",
                    "params": [
                        {
                            "name": "event",
                            "description": "Event name.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "listener",
                            "description": "Listener function.",
                            "type": [
                                [
                                    [
                                        "function"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 37,
                        "file": "Emitter.js",
                        "path": "dist/src/classes"
                    }
                },
                {
                    "name": "emit",
                    "description": "Emits the event.",
                    "params": [
                        {
                            "name": "event",
                            "description": "Event name.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "args",
                            "description": "Listener arguments.",
                            "variable": true,
                            "type": [
                                [
                                    [
                                        "any"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 46,
                        "file": "Emitter.js",
                        "path": "dist/src/classes"
                    }
                }
            ],
            "meta": {
                "line": 17,
                "file": "Emitter.js",
                "path": "dist/src/classes"
            }
        },
        {
            "name": "LevelingError",
            "description": "LevelingError class.",
            "construct": {
                "name": "LevelingError",
                "description": "Creates an 'LevelingError' instance.",
                "params": [
                    {
                        "name": "message",
                        "description": "Error message.",
                        "type": [
                            [
                                [
                                    "String"
                                ]
                            ],
                            [
                                [
                                    "Error"
                                ]
                            ]
                        ]
                    }
                ]
            },
            "props": [
                {
                    "name": "name",
                    "description": "Error name.",
                    "type": [
                        [
                            [
                                "String"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 30,
                        "file": "LevelingError.js",
                        "path": "dist/src/classes"
                    }
                }
            ],
            "meta": {
                "line": 14,
                "file": "LevelingError.js",
                "path": "dist/src/classes"
            }
        },
        {
            "name": "DatabaseManager",
            "description": "Database manager methods class.",
            "construct": {
                "name": "DatabaseManager",
                "description": "Database manager methods class.",
                "params": [
                    {
                        "name": "options",
                        "description": "Leveling options object.",
                        "type": [
                            [
                                [
                                    "LevelingOptions"
                                ]
                            ]
                        ]
                    }
                ]
            },
            "props": [
                {
                    "name": "parser",
                    "description": "Dor Parser.",
                    "access": "private",
                    "type": [
                        [
                            [
                                "DotParser"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 34,
                        "file": "DatabaseManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "fetcher",
                    "description": "Fetch Manager.",
                    "access": "private",
                    "type": [
                        [
                            [
                                "FetchManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 40,
                        "file": "DatabaseManager.js",
                        "path": "dist/src/managers"
                    }
                }
            ],
            "methods": [
                {
                    "name": "keyList",
                    "description": "Gets a list of keys in database.",
                    "params": [
                        {
                            "name": "key",
                            "description": "The key in database.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Array",
                                    "<"
                                ],
                                [
                                    "string",
                                    ">"
                                ]
                            ]
                        ],
                        "description": "An array with all keys in database or 'null' if nothing found."
                    },
                    "meta": {
                        "line": 55,
                        "file": "DatabaseManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "set",
                    "description": "Sets data in a property in database.",
                    "params": [
                        {
                            "name": "key",
                            "description": "The key in database.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "value",
                            "description": "Any data to set in property.",
                            "type": [
                                [
                                    [
                                        "any"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If set successfully: true; else: false"
                    },
                    "meta": {
                        "line": 71,
                        "file": "DatabaseManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "add",
                    "description": "Adds a number to a property data in database.",
                    "params": [
                        {
                            "name": "key",
                            "description": "The key in database.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "value",
                            "description": "Any number to add.",
                            "type": [
                                [
                                    [
                                        "Number"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If added successfully: true; else: false"
                    },
                    "meta": {
                        "line": 86,
                        "file": "DatabaseManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "subtract",
                    "description": "Subtracts a number from a property data in database.",
                    "params": [
                        {
                            "name": "key",
                            "description": "The key in database.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "value",
                            "description": "Any number to subtract.",
                            "type": [
                                [
                                    [
                                        "Number"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If set successfully: true; else: false"
                    },
                    "meta": {
                        "line": 106,
                        "file": "DatabaseManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "fetch",
                    "description": "Fetches the data from the storage file.",
                    "params": [
                        {
                            "name": "key",
                            "description": "The key in database.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "any"
                                ]
                            ],
                            [
                                [
                                    "false"
                                ]
                            ]
                        ],
                        "description": "Value from the specified key or 'false' if failed to read or 'null' if nothing found."
                    },
                    "meta": {
                        "line": 125,
                        "file": "DatabaseManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "remove",
                    "description": "Removes the property from the existing object in database.",
                    "params": [
                        {
                            "name": "key",
                            "description": "The key in database.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If cleared: true; else: false."
                    },
                    "meta": {
                        "line": 137,
                        "file": "DatabaseManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "push",
                    "description": "Pushes a value to a specified array from the database.",
                    "params": [
                        {
                            "name": "key",
                            "description": "The key in database.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "value",
                            "description": "The key in database.",
                            "type": [
                                [
                                    [
                                        "any"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If cleared: true; else: false."
                    },
                    "meta": {
                        "line": 150,
                        "file": "DatabaseManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "removeElement",
                    "description": "Removes an element from a specified array in the database.",
                    "params": [
                        {
                            "name": "key",
                            "description": "The key in database.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "index",
                            "description": "The index in the array.",
                            "type": [
                                [
                                    [
                                        "Number"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If cleared: true; else: false."
                    },
                    "meta": {
                        "line": 169,
                        "file": "DatabaseManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "all",
                    "description": "Fetches the entire database.",
                    "returns": {
                        "types": [
                            [
                                [
                                    "Object"
                                ]
                            ]
                        ],
                        "description": "Database contents"
                    },
                    "meta": {
                        "line": 186,
                        "file": "DatabaseManager.js",
                        "path": "dist/src/managers"
                    }
                }
            ],
            "meta": {
                "line": 28,
                "file": "DatabaseManager.js",
                "path": "dist/src/managers"
            }
        },
        {
            "name": "FetchManager",
            "description": "Fetch manager methods class.",
            "construct": {
                "name": "FetchManager",
                "description": "Fetch manager methods class.",
                "params": [
                    {
                        "name": "options",
                        "description": "Leveling options object.",
                        "type": [
                            [
                                [
                                    "LevelingOptions"
                                ]
                            ]
                        ]
                    }
                ]
            },
            "props": [
                {
                    "name": "storagePath",
                    "description": "Storage Path.",
                    "access": "private",
                    "type": [
                        [
                            [
                                "String"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 33,
                        "file": "FetchManager.js",
                        "path": "dist/src/managers"
                    }
                }
            ],
            "methods": [
                {
                    "name": "fetchXP",
                    "description": "Gets the amount of XP for specified user.",
                    "params": [
                        {
                            "name": "member",
                            "description": "Member or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ],
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Number"
                                ]
                            ]
                        ],
                        "description": "Amount of XP."
                    },
                    "meta": {
                        "line": 47,
                        "file": "FetchManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "fetchTotalXP",
                    "description": "Gets the amount of total XP for specified user.",
                    "params": [
                        {
                            "name": "member",
                            "description": "Member or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ],
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Number"
                                ]
                            ]
                        ],
                        "description": "Amount of XP."
                    },
                    "meta": {
                        "line": 68,
                        "file": "FetchManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "fetchLevels",
                    "description": "Gets the amount of levels for specified user.",
                    "params": [
                        {
                            "name": "member",
                            "description": "Member or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ],
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Number"
                                ]
                            ]
                        ],
                        "description": "Amount of XP."
                    },
                    "meta": {
                        "line": 89,
                        "file": "FetchManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "fetchMaxXP",
                    "description": "Gets the amount of max XP for specified user.",
                    "params": [
                        {
                            "name": "member",
                            "description": "Member or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ],
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Number"
                                ]
                            ]
                        ],
                        "description": "Amount of XP."
                    },
                    "meta": {
                        "line": 110,
                        "file": "FetchManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "fetchDifference",
                    "description": "Gets the difference between max XP and user's XP.",
                    "params": [
                        {
                            "name": "member",
                            "description": "Member or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ],
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Number"
                                ]
                            ]
                        ],
                        "description": "Amount of XP."
                    },
                    "meta": {
                        "line": 131,
                        "file": "FetchManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "fetchAll",
                    "description": "Fetches the entire database.",
                    "returns": {
                        "types": [
                            [
                                [
                                    "Object"
                                ]
                            ]
                        ],
                        "description": "Database contents"
                    },
                    "meta": {
                        "line": 150,
                        "file": "FetchManager.js",
                        "path": "dist/src/managers"
                    }
                }
            ],
            "meta": {
                "line": 27,
                "file": "FetchManager.js",
                "path": "dist/src/managers"
            }
        },
        {
            "name": "LevelManager",
            "description": "Level manager methods class.",
            "construct": {
                "name": "LevelManager",
                "description": "Leveling manager methods class.",
                "params": [
                    {
                        "name": "options",
                        "description": "Leveling options object.",
                        "type": [
                            [
                                [
                                    "LevelingOptions"
                                ]
                            ]
                        ]
                    }
                ]
            },
            "props": [
                {
                    "name": "database",
                    "description": "Database Manager.",
                    "access": "private",
                    "type": [
                        [
                            [
                                "DatabaseManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 34,
                        "file": "LevelManager.js",
                        "path": "dist/src/managers"
                    }
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "description": "Gets the XP for specified user.",
                    "params": [
                        {
                            "name": "member",
                            "description": "Member or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ],
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Number"
                                ]
                            ]
                        ],
                        "description": "Amount of levels."
                    },
                    "meta": {
                        "line": 49,
                        "file": "LevelManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "set",
                    "description": "Sets the XP for specified user.",
                    "params": [
                        {
                            "name": "level",
                            "description": "Amount of levels.",
                            "type": [
                                [
                                    [
                                        "Number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "member",
                            "description": "Member or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ],
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If set successfully: true, else: false."
                    },
                    "meta": {
                        "line": 68,
                        "file": "LevelManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "add",
                    "description": "Adds the XP for specified user.",
                    "params": [
                        {
                            "name": "level",
                            "description": "Amount of levels.",
                            "type": [
                                [
                                    [
                                        "Number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "member",
                            "description": "Member or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ],
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "onMessage",
                            "description": "The value will be true if the method was called on 'messageCreate' bot event.",
                            "default": false,
                            "type": [
                                [
                                    [
                                        "Boolean"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If added successfully: true, else: false."
                    },
                    "meta": {
                        "line": 99,
                        "file": "LevelManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "subtract",
                    "description": "Subtracts the XP for specified user.",
                    "params": [
                        {
                            "name": "level",
                            "description": "Amount of levels.",
                            "type": [
                                [
                                    [
                                        "Number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "member",
                            "description": "Member or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ],
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If subtracted successfully: true, else: false."
                    },
                    "meta": {
                        "line": 130,
                        "file": "LevelManager.js",
                        "path": "dist/src/managers"
                    }
                }
            ],
            "meta": {
                "line": 28,
                "file": "LevelManager.js",
                "path": "dist/src/managers"
            }
        },
        {
            "name": "RanksManager",
            "description": "Ranks manager methods class.",
            "construct": {
                "name": "RanksManager",
                "description": "Ranks manager methods class.",
                "params": [
                    {
                        "name": "options",
                        "description": "Leveling options object.",
                        "type": [
                            [
                                [
                                    "LevelingOptions"
                                ]
                            ]
                        ]
                    }
                ]
            },
            "props": [
                {
                    "name": "database",
                    "description": "Database Manager.",
                    "access": "private",
                    "type": [
                        [
                            [
                                "DatabaseManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 33,
                        "file": "RanksManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "client",
                    "description": "Discord Bot Client.",
                    "access": "private",
                    "type": [
                        [
                            [
                                "Client"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 39,
                        "file": "RanksManager.js",
                        "path": "dist/src/managers"
                    }
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "description": "Fetches the user's rank.",
                    "params": [
                        {
                            "name": "member",
                            "description": "Member or it's ID",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ],
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "RankData"
                                ]
                            ]
                        ],
                        "description": "User's rank object."
                    },
                    "meta": {
                        "line": 54,
                        "file": "RanksManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "leaderboard",
                    "description": "Shows a level leaderboard for specified server.",
                    "params": [
                        {
                            "name": "guild",
                            "description": "Guild or it's ID",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Array",
                                    "<"
                                ],
                                [
                                    "LeaderboardData",
                                    ">"
                                ]
                            ]
                        ],
                        "description": "Sorted leaderboard array."
                    },
                    "meta": {
                        "line": 81,
                        "file": "RanksManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "setMultiplier",
                    "description": "Sets the multiplier for specified user.",
                    "params": [
                        {
                            "name": "multiplier",
                            "description": "The multimplier number to set.",
                            "type": [
                                [
                                    [
                                        "Number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "member",
                            "description": "Member or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ],
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If set successfully: true; else: false"
                    },
                    "meta": {
                        "line": 113,
                        "file": "RanksManager.js",
                        "path": "dist/src/managers"
                    }
                }
            ],
            "meta": {
                "line": 27,
                "file": "RanksManager.js",
                "path": "dist/src/managers"
            }
        },
        {
            "name": "SettingsManager",
            "description": "Settings manager methods class.",
            "construct": {
                "name": "SettingsManager",
                "description": "Ranks manager methods class.",
                "params": [
                    {
                        "name": "options",
                        "description": "Leveling options object.",
                        "type": [
                            [
                                [
                                    "LevelingOptions"
                                ]
                            ]
                        ]
                    }
                ]
            },
            "props": [
                {
                    "name": "options",
                    "description": "Leveling Options.",
                    "access": "private",
                    "type": [
                        [
                            [
                                "LevelingOptions"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 44,
                        "file": "SettingsManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "database",
                    "description": "Database Manager.",
                    "access": "private",
                    "type": [
                        [
                            [
                                "DatabaseManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 50,
                        "file": "SettingsManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "utils",
                    "description": "Utils Manager.",
                    "access": "private",
                    "type": [
                        [
                            [
                                "UtilsManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 56,
                        "file": "SettingsManager.js",
                        "path": "dist/src/managers"
                    }
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "description": "Gets the specified setting from the database.\r\rNote: If the server don't have any setting specified,\rthe module will take the values from the\roptions object or default options object.",
                    "params": [
                        {
                            "name": "key",
                            "description": "The setting to fetch.",
                            "type": [
                                [
                                    [
                                        "xp",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "maxXP",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "multiplier",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "status",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "ignoredUsers",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "lockedChannels",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "ignoreBots",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "filter",
                                        "'"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "any"
                                ]
                            ]
                        ],
                        "description": "The setting from the database."
                    },
                    "meta": {
                        "line": 77,
                        "file": "SettingsManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "set",
                    "description": "Changes the specified setting.\r\rNote: If the server don't have any setting specified,\rthe module will take the values from the\roptions object or default options object.",
                    "params": [
                        {
                            "name": "key",
                            "description": "The setting to change.",
                            "type": [
                                [
                                    [
                                        "xp",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "maxXP",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "multiplier",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "status",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "ignoredUsers",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "lockedChannels",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "ignoreBots",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "filter",
                                        "'"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "value",
                            "description": "The value to set.",
                            "type": [
                                [
                                    [
                                        "any"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "SettingsTypes"
                                ]
                            ]
                        ],
                        "description": "The server settings object."
                    },
                    "meta": {
                        "line": 100,
                        "file": "SettingsManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "push",
                    "description": "Pushes the element in a setting's array.\r\rNote: If the server don't have any setting specified,\rthe module will take the values from the\roptions object or default options object.",
                    "params": [
                        {
                            "name": "key",
                            "description": "The setting to change.",
                            "type": [
                                [
                                    [
                                        "ignoredUsers",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "lockedChannels",
                                        "'"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "value",
                            "description": "The value to set.",
                            "type": [
                                [
                                    [
                                        "any"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "SettingsTypes"
                                ]
                            ]
                        ],
                        "description": "The server settings object."
                    },
                    "meta": {
                        "line": 129,
                        "file": "SettingsManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "unpush",
                    "description": "Removes the element from a setting's array.\r\rNote: If the server don't have any setting specified,\rthe module will take the values from the\roptions object or default options object.",
                    "params": [
                        {
                            "name": "key",
                            "description": "The setting to change.",
                            "type": [
                                [
                                    [
                                        "ignoredUsers",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "lockedChannels",
                                        "'"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "value",
                            "description": "The value to remove.",
                            "type": [
                                [
                                    [
                                        "any"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "SettingsTypes"
                                ]
                            ]
                        ],
                        "description": "The server settings object."
                    },
                    "meta": {
                        "line": 159,
                        "file": "SettingsManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "remove",
                    "description": "Removes the specified setting.\r\rNote: If the server don't have any setting specified,\rthe module will take the values from the\roptions object or default options object.",
                    "params": [
                        {
                            "name": "key",
                            "description": "The setting to remove.",
                            "type": [
                                [
                                    [
                                        "xp",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "maxXP",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "multiplier",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "status",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "ignoredUsers",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "lockedChannels",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "ignoreBots",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "filter",
                                        "'"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "SettingsTypes"
                                ]
                            ]
                        ],
                        "description": "The server settings object."
                    },
                    "meta": {
                        "line": 189,
                        "file": "SettingsManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "all",
                    "description": "Fetches the server's settings object.",
                    "params": [
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "SettingsTypes"
                                ]
                            ]
                        ],
                        "description": "The server settings object."
                    },
                    "meta": {
                        "line": 206,
                        "file": "SettingsManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "reset",
                    "description": "Resets all the settings to setting that are in options object.",
                    "params": [
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "SettingsTypes"
                                ]
                            ]
                        ],
                        "description": "The server settings object."
                    },
                    "meta": {
                        "line": 228,
                        "file": "SettingsManager.js",
                        "path": "dist/src/managers"
                    }
                }
            ],
            "meta": {
                "line": 38,
                "file": "SettingsManager.js",
                "path": "dist/src/managers"
            }
        },
        {
            "name": "TotalXPManager",
            "description": "Total XP manager methods class.",
            "construct": {
                "name": "TotalXPManager",
                "description": "Total XP manager methods class.",
                "params": [
                    {
                        "name": "options",
                        "description": "Leveling options object.",
                        "type": [
                            [
                                [
                                    "LevelingOptions"
                                ]
                            ]
                        ]
                    }
                ]
            },
            "props": [
                {
                    "name": "database",
                    "description": "Database Manager.",
                    "access": "private",
                    "type": [
                        [
                            [
                                "DatabaseManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 34,
                        "file": "TotalXPManager.js",
                        "path": "dist/src/managers"
                    }
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "description": "Gets the XP for specified user.",
                    "params": [
                        {
                            "name": "member",
                            "description": "Member or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ],
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Number"
                                ]
                            ]
                        ],
                        "description": "Amount of total XP."
                    },
                    "meta": {
                        "line": 49,
                        "file": "TotalXPManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "set",
                    "description": "Sets the XP for specified user.",
                    "params": [
                        {
                            "name": "totalXP",
                            "description": "Amount of total XP.",
                            "type": [
                                [
                                    [
                                        "Number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "member",
                            "description": "Member or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ],
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If set successfully: true, else: false."
                    },
                    "meta": {
                        "line": 68,
                        "file": "TotalXPManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "add",
                    "description": "Adds the XP for specified user.",
                    "params": [
                        {
                            "name": "totalXP",
                            "description": "Amount of total XP.",
                            "type": [
                                [
                                    [
                                        "Number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "member",
                            "description": "Member or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ],
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "onMessage",
                            "description": "The value will be true if the method was called on 'messageCreate' bot event.",
                            "default": false,
                            "type": [
                                [
                                    [
                                        "Boolean"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If added successfully: true, else: false."
                    },
                    "meta": {
                        "line": 99,
                        "file": "TotalXPManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "subtract",
                    "description": "Subtracts the XP for specified user.",
                    "params": [
                        {
                            "name": "totalXP",
                            "description": "Amount of total XP.",
                            "type": [
                                [
                                    [
                                        "Number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "member",
                            "description": "Member or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ],
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If subtracted successfully: true, else: false."
                    },
                    "meta": {
                        "line": 129,
                        "file": "TotalXPManager.js",
                        "path": "dist/src/managers"
                    }
                }
            ],
            "meta": {
                "line": 28,
                "file": "TotalXPManager.js",
                "path": "dist/src/managers"
            }
        },
        {
            "name": "UtilsManager",
            "description": "Utils manager methods class.",
            "construct": {
                "name": "UtilsManager",
                "description": "Utils manager methods class.",
                "params": [
                    {
                        "name": "options",
                        "description": "Leveling options object.",
                        "type": [
                            [
                                [
                                    "LevelingOptions"
                                ]
                            ]
                        ]
                    }
                ]
            },
            "props": [
                {
                    "name": "fetcher",
                    "description": "Fetch Manager.",
                    "access": "private",
                    "type": [
                        [
                            [
                                "FetchManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 35,
                        "file": "UtilsManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "database",
                    "description": "Database Manager.",
                    "access": "private",
                    "type": [
                        [
                            [
                                "DatabaseManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 41,
                        "file": "UtilsManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "client",
                    "description": "Discord Bot Client.",
                    "access": "private",
                    "type": [
                        [
                            [
                                "Client"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 47,
                        "file": "UtilsManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "options",
                    "description": "Leveling Options.",
                    "access": "private",
                    "type": [
                        [
                            [
                                "LevelingOptions"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 53,
                        "file": "UtilsManager.js",
                        "path": "dist/src/managers"
                    }
                }
            ],
            "methods": [
                {
                    "name": "checkUpdates",
                    "description": "Checks for if the module is up to date.",
                    "async": true,
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<"
                                ],
                                [
                                    "VersionData",
                                    ">"
                                ]
                            ]
                        ],
                        "description": "This method will show is the module updated, latest version and installed version."
                    },
                    "meta": {
                        "line": 68,
                        "file": "UtilsManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "all",
                    "description": "Fetches the entire database.",
                    "returns": {
                        "types": [
                            [
                                [
                                    "Object"
                                ]
                            ]
                        ],
                        "description": "Database contents"
                    },
                    "meta": {
                        "line": 88,
                        "file": "UtilsManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "write",
                    "description": "Writes the data to file.",
                    "params": [
                        {
                            "name": "path",
                            "description": "File path to write.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data",
                            "description": "Any data to write",
                            "type": [
                                [
                                    [
                                        "any"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If successfully written: true; else: false."
                    },
                    "meta": {
                        "line": 97,
                        "file": "UtilsManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "clearStorage",
                    "description": "Clears the storage file.",
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If cleared successfully: true; else: false"
                    },
                    "meta": {
                        "line": 112,
                        "file": "UtilsManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "removeGuild",
                    "description": "Fully removes the guild from database.",
                    "params": [
                        {
                            "name": "guildID",
                            "description": "Guild ID",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If cleared successfully: true; else: false"
                    },
                    "meta": {
                        "line": 125,
                        "file": "UtilsManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "removeUser",
                    "description": "Removes the user from database.",
                    "params": [
                        {
                            "name": "memberID",
                            "description": "Member ID",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guildID",
                            "description": "Guild ID",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If cleared successfully: true; else: false"
                    },
                    "meta": {
                        "line": 141,
                        "file": "UtilsManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "reset",
                    "description": "Sets the default user object for the specified member.",
                    "params": [
                        {
                            "name": "memberID",
                            "description": "Member ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guildID",
                            "description": "Guild ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "object",
                            "description": "Custom rank object to set.",
                            "type": [
                                [
                                    [
                                        "RankData"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If reset is successful: true; else: false."
                    },
                    "meta": {
                        "line": 161,
                        "file": "UtilsManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "getRankObject",
                    "description": "Returns a rank object with specified values.",
                    "params": [
                        {
                            "name": "options",
                            "description": "Rank object to use.",
                            "type": [
                                [
                                    [
                                        "LevelData"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "LevelData"
                                ]
                            ]
                        ],
                        "description": "Rank object with specified values."
                    },
                    "meta": {
                        "line": 187,
                        "file": "UtilsManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "typeOf",
                    "description": "Returns the type or instance of specified item.",
                    "params": [
                        {
                            "name": "item",
                            "description": "The item to get the type of.",
                            "type": [
                                [
                                    [
                                        "any"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "String"
                                ]
                            ]
                        ],
                        "description": "Type or instance of the item."
                    },
                    "meta": {
                        "line": 218,
                        "file": "UtilsManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "isObject",
                    "description": "Checks for is the item object and returns it.",
                    "params": [
                        {
                            "name": "item",
                            "description": "The item to check.",
                            "type": [
                                [
                                    [
                                        "any"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "Is the item object or not."
                    },
                    "meta": {
                        "line": 232,
                        "file": "UtilsManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "checkOptions",
                    "description": "Checks the Leveling options object, fixes the problems in it and returns the fixed options object.",
                    "params": [
                        {
                            "name": "options",
                            "description": "Option checker options.",
                            "type": [
                                [
                                    [
                                        "CheckerOptions"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "levelingOptions",
                            "description": "Leveling options object to check.",
                            "type": [
                                [
                                    [
                                        "LevelingOptions"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "LevelingOptions"
                                ]
                            ]
                        ],
                        "description": "Fixed Leveling options object."
                    },
                    "meta": {
                        "line": 243,
                        "file": "UtilsManager.js",
                        "path": "dist/src/managers"
                    }
                }
            ],
            "meta": {
                "line": 29,
                "file": "UtilsManager.js",
                "path": "dist/src/managers"
            }
        },
        {
            "name": "XPManager",
            "description": "XP manager methods class.",
            "construct": {
                "name": "XPManager",
                "description": "XP manager methods class.",
                "params": [
                    {
                        "name": "options",
                        "description": "Leveling options object.",
                        "type": [
                            [
                                [
                                    "LevelingOptions"
                                ]
                            ]
                        ]
                    }
                ]
            },
            "props": [
                {
                    "name": "database",
                    "description": "Database Manager.",
                    "access": "private",
                    "type": [
                        [
                            [
                                "DatabaseManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 34,
                        "file": "XPManager.js",
                        "path": "dist/src/managers"
                    }
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "description": "Gets the XP for specified user.",
                    "params": [
                        {
                            "name": "member",
                            "description": "Member or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ],
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Number"
                                ]
                            ]
                        ],
                        "description": "Amount of XP."
                    },
                    "meta": {
                        "line": 49,
                        "file": "XPManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "set",
                    "description": "Sets the XP for specified user.",
                    "params": [
                        {
                            "name": "xp",
                            "description": "Amount of XP.",
                            "type": [
                                [
                                    [
                                        "Number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "member",
                            "description": "Member or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ],
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "onMessage",
                            "description": "The value will be true if the method was called on 'messageCreate' bot event.",
                            "type": [
                                [
                                    [
                                        "Boolean"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If set successfully: true, else: false."
                    },
                    "meta": {
                        "line": 69,
                        "file": "XPManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "add",
                    "description": "Adds the XP for specified user.",
                    "params": [
                        {
                            "name": "xp",
                            "description": "Amount of XP.",
                            "type": [
                                [
                                    [
                                        "Number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "member",
                            "description": "Member or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ],
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "onMessage",
                            "description": "The value will be true if the method was called on 'messageCreate' bot event.",
                            "default": false,
                            "type": [
                                [
                                    [
                                        "Boolean"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If added successfully: true, else: false."
                    },
                    "meta": {
                        "line": 101,
                        "file": "XPManager.js",
                        "path": "dist/src/managers"
                    }
                },
                {
                    "name": "subtract",
                    "description": "Subtracts the XP for specified user.",
                    "params": [
                        {
                            "name": "xp",
                            "description": "Amount of XP.",
                            "type": [
                                [
                                    [
                                        "Number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "member",
                            "description": "Member or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ],
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Guild or it's ID.",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Boolean"
                                ]
                            ]
                        ],
                        "description": "If subtracted successfully: true, else: false."
                    },
                    "meta": {
                        "line": 131,
                        "file": "XPManager.js",
                        "path": "dist/src/managers"
                    }
                }
            ],
            "meta": {
                "line": 28,
                "file": "XPManager.js",
                "path": "dist/src/managers"
            }
        }
    ],
    "interfaces": [],
    "typedefs": [
        {
            "name": "VersionData",
            "type": [
                [
                    [
                        "Object"
                    ]
                ]
            ],
            "props": [
                {
                    "name": "updated",
                    "description": "Is the module updated.",
                    "type": [
                        [
                            [
                                "Boolean"
                            ]
                        ]
                    ]
                },
                {
                    "name": "installedVersion",
                    "description": "Version of module that you have installed.",
                    "type": [
                        [
                            [
                                "installedVersion"
                            ]
                        ]
                    ]
                },
                {
                    "name": "packageVersion",
                    "description": "Latest version of the module.",
                    "type": [
                        [
                            [
                                "packageVersion"
                            ]
                        ]
                    ]
                }
            ],
            "meta": {
                "line": 161,
                "file": "XPManager.js",
                "path": "dist/src/managers"
            }
        },
        {
            "name": "RankData",
            "type": [
                [
                    [
                        "Object"
                    ]
                ]
            ],
            "props": [
                {
                    "name": "userData",
                    "description": "User's data object.",
                    "type": [
                        [
                            [
                                "UserData"
                            ]
                        ]
                    ]
                },
                {
                    "name": "level",
                    "description": "User's level",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "xp",
                    "description": "User's amount of XP.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "totalXP",
                    "description": "User's total amount of XP.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "maxXP",
                    "description": "How much XP in total the user need to reach the next level.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "difference",
                    "description": "The difference between max XP and current amount of XP. It shows how much XP he need to reach the next level.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "multiplier",
                    "description": "XP Multiplier.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                }
            ],
            "meta": {
                "line": 168,
                "file": "XPManager.js",
                "path": "dist/src/managers"
            }
        },
        {
            "name": "LeaderboardData",
            "description": "Leaderboard data object.",
            "type": [
                [
                    [
                        "Object"
                    ]
                ]
            ],
            "props": [
                {
                    "name": "userID",
                    "description": "User's ID.",
                    "type": [
                        [
                            [
                                "String"
                            ]
                        ]
                    ]
                },
                {
                    "name": "level",
                    "description": "User's level.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "xp",
                    "description": "User's amount of XP.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "totalXP",
                    "description": "User's amount of total XP.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "maxXP",
                    "description": "User's data object.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "user",
                    "description": "User's data object.",
                    "type": [
                        [
                            [
                                "User"
                            ]
                        ]
                    ]
                },
                {
                    "name": "difference",
                    "description": "User's amount of total XP.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "multiplier",
                    "description": "XP Multiplier.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                }
            ],
            "meta": {
                "line": 179,
                "file": "XPManager.js",
                "path": "dist/src/managers"
            }
        },
        {
            "name": "LevelingOptions",
            "description": "Default Leveling options.",
            "type": [
                [
                    [
                        "Object"
                    ]
                ]
            ],
            "props": [
                {
                    "name": "storagePath",
                    "description": "Full path to a JSON file. Default: './leveling.json'.",
                    "optional": true,
                    "default": "'./leveling.json'",
                    "type": [
                        [
                            [
                                "String"
                            ]
                        ]
                    ]
                },
                {
                    "name": "checkStorage",
                    "description": "Checks the if database file exists and if it has errors. Default: true",
                    "optional": true,
                    "default": true,
                    "type": [
                        [
                            [
                                "Boolean"
                            ]
                        ]
                    ]
                },
                {
                    "name": "ignoreBots",
                    "description": "If true, every message from bots won't give them XP. Default: true.",
                    "optional": true,
                    "default": true,
                    "type": [
                        [
                            [
                                "Boolean"
                            ]
                        ]
                    ]
                },
                {
                    "name": "xp",
                    "description": "Amount of XP that user will receive after sending a message. Default: 5.",
                    "optional": true,
                    "default": 5,
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "status",
                    "description": "You can enable or disable the leveling system using this option. Default: true.",
                    "optional": true,
                    "default": true,
                    "type": [
                        [
                            [
                                "Boolean"
                            ]
                        ]
                    ]
                },
                {
                    "name": "maxXP",
                    "description": "Amount of XP that user will totally need to reach the next level. This value will double for each level. Default: 300.",
                    "optional": true,
                    "default": 300,
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "lockedChannels",
                    "description": "Array of channel IDs that won't give XP to users. Default: [].",
                    "optional": true,
                    "default": "[]",
                    "type": [
                        [
                            [
                                "Array",
                                "<"
                            ],
                            [
                                "String",
                                ">"
                            ]
                        ]
                    ]
                },
                {
                    "name": "ignoredGuilds",
                    "description": "Array of guilds on which none of the members will be given XP. Default: [].",
                    "optional": true,
                    "default": "[]",
                    "type": [
                        [
                            [
                                "Array",
                                "<"
                            ],
                            [
                                "String",
                                ">"
                            ]
                        ]
                    ]
                },
                {
                    "name": "multiplier",
                    "description": "XP multiplier. Default: 1.",
                    "optional": true,
                    "default": 1,
                    "type": [
                        [
                            [
                                "Boolean"
                            ]
                        ]
                    ]
                },
                {
                    "name": "filter",
                    "description": "Callback function that must return a boolean value, it will add XP only to authors of filtered messages. Default: null.",
                    "optional": true,
                    "default": "() => true",
                    "type": [
                        [
                            [
                                "FilterFunction"
                            ]
                        ]
                    ]
                },
                {
                    "name": "updateCountdown",
                    "description": "Checks for if storage file exists in specified time (in ms). Default: 1000.",
                    "optional": true,
                    "default": 1000,
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "updater",
                    "description": "Update Checker options object.",
                    "optional": true,
                    "type": [
                        [
                            [
                                "UpdaterOptions"
                            ]
                        ]
                    ]
                },
                {
                    "name": "errorHandler",
                    "description": "Error Handler options object.",
                    "optional": true,
                    "type": [
                        [
                            [
                                "ErrorHandlerOptions"
                            ]
                        ]
                    ]
                }
            ],
            "meta": {
                "line": 191,
                "file": "XPManager.js",
                "path": "dist/src/managers"
            }
        },
        {
            "name": "UpdaterOptions",
            "description": "Updatee options object.",
            "type": [
                [
                    [
                        "Object"
                    ]
                ]
            ],
            "props": [
                {
                    "name": "checkUpdates",
                    "description": "Sends the update state message in console on start. Default: true.",
                    "optional": true,
                    "default": true,
                    "type": [
                        [
                            [
                                "Boolean"
                            ]
                        ]
                    ]
                },
                {
                    "name": "upToDateMessage",
                    "description": "Sends the message in console on start if module is up to date. Default: true.",
                    "optional": true,
                    "default": true,
                    "type": [
                        [
                            [
                                "Boolean"
                            ]
                        ]
                    ]
                }
            ],
            "meta": {
                "line": 208,
                "file": "XPManager.js",
                "path": "dist/src/managers"
            }
        },
        {
            "name": "ErrorHandlerOptions",
            "type": [
                [
                    [
                        "Object"
                    ]
                ]
            ],
            "props": [
                {
                    "name": "handleErrors",
                    "description": "Handles all errors on startup. Default: true.",
                    "optional": true,
                    "default": true,
                    "type": [
                        [
                            [
                                "Boolean"
                            ]
                        ]
                    ]
                },
                {
                    "name": "attempts",
                    "description": "Amount of attempts to load the module. Use 0 for infinity attempts. Default: 5.",
                    "optional": true,
                    "default": 5,
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "time",
                    "description": "Time between every attempt to start the module (in ms). Default: 3000.",
                    "optional": true,
                    "default": 3000,
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                }
            ],
            "meta": {
                "line": 214,
                "file": "XPManager.js",
                "path": "dist/src/managers"
            }
        },
        {
            "name": "CheckerOptions",
            "description": "Options object for an 'Leveling.utils.checkOptions' method.",
            "type": [
                [
                    [
                        "Object"
                    ]
                ]
            ],
            "props": [
                {
                    "name": "ignoreInvalidTypes",
                    "description": "Allows the method to ignore the options with invalid types. Default: false.",
                    "optional": true,
                    "default": false,
                    "type": [
                        [
                            [
                                "Boolean"
                            ]
                        ]
                    ]
                },
                {
                    "name": "ignoreUnspecifiedOptions",
                    "description": "Allows the method to ignore the unspecified  Default: false.",
                    "optional": true,
                    "default": false,
                    "type": [
                        [
                            [
                                "Boolean"
                            ]
                        ]
                    ]
                },
                {
                    "name": "ignoreInvalidOptions",
                    "description": "Allows the method to ignore the unexisting  Default: false.",
                    "optional": true,
                    "default": false,
                    "type": [
                        [
                            [
                                "Boolean"
                            ]
                        ]
                    ]
                },
                {
                    "name": "showProblems",
                    "description": "Allows the method to show all the problems in the console. Default: false.",
                    "optional": true,
                    "default": false,
                    "type": [
                        [
                            [
                                "Boolean"
                            ]
                        ]
                    ]
                },
                {
                    "name": "sendLog",
                    "description": "Allows the method to send the result in the console. Default: false.",
                    "optional": true,
                    "default": false,
                    "type": [
                        [
                            [
                                "Boolean"
                            ]
                        ]
                    ]
                },
                {
                    "name": "sendSuccessLog",
                    "description": "Allows the method to send the result if no problems were found. Default: false.",
                    "optional": true,
                    "default": false,
                    "type": [
                        [
                            [
                                "Boolean"
                            ]
                        ]
                    ]
                }
            ],
            "meta": {
                "line": 221,
                "file": "XPManager.js",
                "path": "dist/src/managers"
            }
        },
        {
            "name": "UserData",
            "description": "User data object.",
            "type": [
                [
                    [
                        "Object"
                    ]
                ]
            ],
            "props": [
                {
                    "name": "id",
                    "description": "User's ID.",
                    "type": [
                        [
                            [
                                "String"
                            ]
                        ]
                    ]
                },
                {
                    "name": "username",
                    "description": "User's username.",
                    "type": [
                        [
                            [
                                "String"
                            ]
                        ]
                    ]
                },
                {
                    "name": "tag",
                    "description": "User's tag.",
                    "type": [
                        [
                            [
                                "String"
                            ]
                        ]
                    ]
                },
                {
                    "name": "discriminator",
                    "description": "User's discriminator.",
                    "type": [
                        [
                            [
                                "String"
                            ]
                        ]
                    ]
                }
            ],
            "meta": {
                "line": 231,
                "file": "XPManager.js",
                "path": "dist/src/managers"
            }
        },
        {
            "name": "LevelData",
            "type": [
                [
                    [
                        "Object"
                    ]
                ]
            ],
            "props": [
                {
                    "name": "xp",
                    "description": "User's amount of XP.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "totalXP",
                    "description": "User's total amount of XP.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "level",
                    "description": "User's level.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "maxXP",
                    "description": "How much XP in total the user need to reach the next level.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "difference",
                    "description": "The difference between max XP and current amount of XP. It shows how much XP he need to reach the next level.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "multiplier",
                    "description": "User's XP multiplier.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "onMessage",
                    "description": "The value will be true if the event was called on 'messageCreate' bot event.",
                    "type": [
                        [
                            [
                                "Boolean"
                            ]
                        ]
                    ]
                }
            ],
            "meta": {
                "line": 239,
                "file": "XPManager.js",
                "path": "dist/src/managers"
            }
        },
        {
            "name": "XPData",
            "type": [
                [
                    [
                        "Object"
                    ]
                ]
            ],
            "props": [
                {
                    "name": "guildID",
                    "description": "Guild ID.",
                    "type": [
                        [
                            [
                                "String"
                            ]
                        ]
                    ]
                },
                {
                    "name": "userID",
                    "description": "User ID.",
                    "type": [
                        [
                            [
                                "String"
                            ]
                        ]
                    ]
                },
                {
                    "name": "xp",
                    "description": "User's amount of XP.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "totalXP",
                    "description": "User's total amount of XP.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "level",
                    "description": "User's level.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "maxXP",
                    "description": "How much XP in total the user need to reach the next level.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "difference",
                    "description": "The difference between max XP and current amount of XP. It shows how much XP he need to reach the next level.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "multiplier",
                    "description": "User's XP multiplier.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "onMessage",
                    "description": "The value will be true if the event was called on 'messageCreate' bot event.",
                    "type": [
                        [
                            [
                                "Boolean"
                            ]
                        ]
                    ]
                }
            ],
            "meta": {
                "line": 250,
                "file": "XPManager.js",
                "path": "dist/src/managers"
            }
        },
        {
            "name": "LevelUpData",
            "type": [
                [
                    [
                        "Object"
                    ]
                ]
            ],
            "props": [
                {
                    "name": "guildID",
                    "description": "Guild ID.",
                    "type": [
                        [
                            [
                                "String"
                            ]
                        ]
                    ]
                },
                {
                    "name": "user",
                    "description": "The user that reached a new level.",
                    "type": [
                        [
                            [
                                "User"
                            ]
                        ]
                    ]
                },
                {
                    "name": "level",
                    "description": "New level.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "maxXP",
                    "description": "How much XP in total the user need to reach the next level.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "difference",
                    "description": "The difference between max XP and current amount of XP. It shows how much XP he need to reach the next level.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "multiplier",
                    "description": "User's XP multiplier.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "onMessage",
                    "description": "The value will be true if the event was called on 'messageCreate' bot event.",
                    "type": [
                        [
                            [
                                "Boolean"
                            ]
                        ]
                    ]
                }
            ],
            "meta": {
                "line": 263,
                "file": "XPManager.js",
                "path": "dist/src/managers"
            }
        },
        {
            "name": "SettingsTypes",
            "type": [
                [
                    [
                        "Object"
                    ]
                ]
            ],
            "props": [
                {
                    "name": "xp",
                    "description": "Amount of XP that user will receive after sending a message.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "maxXP",
                    "description": "Amount of XP that user will totally need to reach the next level. This value will double for each level.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "multiplier",
                    "description": "XP multiplier.",
                    "type": [
                        [
                            [
                                "Number"
                            ]
                        ]
                    ]
                },
                {
                    "name": "status",
                    "description": "You can enable or disable the leveling system using this option.",
                    "type": [
                        [
                            [
                                "Boolean"
                            ]
                        ]
                    ]
                },
                {
                    "name": "ignoredUsers",
                    "description": "Array of user IDs that won't give XP.",
                    "type": [
                        [
                            [
                                "Array",
                                "<"
                            ],
                            [
                                "String",
                                ">"
                            ]
                        ]
                    ]
                },
                {
                    "name": "lockedChannels",
                    "description": "Array of channel IDs that won't give XP to users.",
                    "type": [
                        [
                            [
                                "Array",
                                "<"
                            ],
                            [
                                "String",
                                ">"
                            ]
                        ]
                    ]
                },
                {
                    "name": "ignoreBots",
                    "description": "If true, every message from bots won't give them XP.",
                    "type": [
                        [
                            [
                                "Boolean"
                            ]
                        ]
                    ]
                },
                {
                    "name": "filter",
                    "description": "Callback function that must return a boolean value, it will add XP only to authors of filtered messages.",
                    "type": [
                        [
                            [
                                "String"
                            ]
                        ],
                        [
                            [
                                "FilterFunction"
                            ]
                        ]
                    ]
                }
            ],
            "meta": {
                "line": 274,
                "file": "XPManager.js",
                "path": "dist/src/managers"
            }
        },
        {
            "name": "SettingsArrays",
            "type": [
                [
                    [
                        "Object"
                    ]
                ]
            ],
            "props": [
                {
                    "name": "ignoredUsers",
                    "description": "Array of user IDs that won't give XP.",
                    "type": [
                        [
                            [
                                "Array",
                                "<"
                            ],
                            [
                                "String",
                                ">"
                            ]
                        ]
                    ]
                },
                {
                    "name": "lockedChannels",
                    "description": "Array of channel IDs that won't give XP to users.",
                    "type": [
                        [
                            [
                                "Array",
                                "<"
                            ],
                            [
                                "String",
                                ">"
                            ]
                        ]
                    ]
                }
            ],
            "meta": {
                "line": 286,
                "file": "XPManager.js",
                "path": "dist/src/managers"
            }
        },
        {
            "name": "SendMessage",
            "description": "A function that will send a specified message to a specified channel.",
            "type": [
                [
                    [
                        "function"
                    ]
                ]
            ],
            "params": [
                {
                    "name": "msg",
                    "description": "Message string, embed, attachment or message options.",
                    "type": [
                        [
                            [
                                "String"
                            ]
                        ],
                        [
                            [
                                "MessageEmbed"
                            ]
                        ],
                        [
                            [
                                "MessageAttachment"
                            ]
                        ],
                        [
                            [
                                "MessageOptions"
                            ]
                        ]
                    ]
                },
                {
                    "name": "channel",
                    "description": "Channel or it's ID.",
                    "type": [
                        [
                            [
                                "String"
                            ]
                        ],
                        [
                            [
                                "Channel"
                            ]
                        ]
                    ]
                }
            ],
            "returns": [
                [
                    [
                        "Promise",
                        "<"
                    ],
                    [
                        "Message",
                        ">"
                    ]
                ]
            ],
            "meta": {
                "line": 292,
                "file": "XPManager.js",
                "path": "dist/src/managers"
            }
        },
        {
            "name": "FilterFunction",
            "description": "Filter function that accepts a message;\rit must return a boolean value and it will add XP\ronly to authors of filtered messages.;\rUse 'null' to disable the filter. Default: '() => true'.",
            "type": [
                [
                    [
                        "function"
                    ]
                ]
            ],
            "params": [
                {
                    "name": "msg",
                    "type": [
                        [
                            [
                                "Message"
                            ]
                        ]
                    ]
                }
            ],
            "returns": {
                "types": [
                    [
                        [
                            "Boolean"
                        ]
                    ]
                ],
                "description": "Boolean value."
            },
            "meta": {
                "line": 300,
                "file": "XPManager.js",
                "path": "dist/src/managers"
            }
        }
    ],
    "externals": []
}